
;;; ---------------------------------------------------------------------------
;;; Constants

#kTotalAICount 29

#KeyLeft "<"
#KeyRight ">"
#KeyDown "v"
#KeyUp "^"
#KeyEnter "Z"
#KeyExit "X"

#kTickCount "<size=0>_tick_count"
#kTickPerSecond "</size>tick_per_second"

#kRegionCount 13
#kMaxRegionDifficulty (6 * {kRegionCount})

;;; ---------------------------------------------------------------------------
;;; Utilities

; Convert from relative vector to screen vector
#relvec(x, y) vec(width.d() * ({x}), height.d() * ({y}))

; Click at relative location
#relclick(x, y) click(vec(width.d() * ({x}), height.d() * ({y})))
; #relclick(x, y) click({relvec(x, y)})

; Click at relative location of a grid
; (x1, y1) must be top-left
; (x2, y2) must be bottom-right
#gridClick(x1, y1, x2, y2, nCol, nRow, i) \
    {relclick( \
        ({x1}) + if(({nCol}) <= 1, 0.0, (({x2}) - ({x1})) * i2d(({i}) % ({nCol})) / i2d(({nCol}) - 1)), \
        ({y1}) - if(({nRow}) <= 1, 0.0, (({y1}) - ({y2})) * i2d(({i}) / ({nCol})) / i2d(({nRow}) - 1)) \
    )}

; Scroll the scrollbar at relative location to dx and dy
#relscrollbar(x, y, dx, dy) scrollbar(vec(width.d() * ({x}), height.d() * ({y})), ({dx}), ({dy}))

; Clamp positive
#positive(x) double.max(0.0, ({x}))

; Extended min
#double.min.1(a) ({a})
#double.min.2(n1, n2) double.min(({n1}), {double.min.1(({n2}))})
#double.min.3(n1, n2, n3) double.min(({n1}), {double.min.2(({n2}), ({n3}))})
#double.min.4(n1, n2, n3, n4) double.min(({n1}), {double.min.3(({n2}), ({n3}), ({n4}))})
#double.min.5(n1, n2, n3, n4, n5) double.min(({n1}), {double.min.4(({n2}), ({n3}), ({n4}), ({n5}))})
#double.min.6(n1, n2, n3, n4, n5, n6) double.min(({n1}), {double.min.5(({n2}), ({n3}), ({n4}), ({n5}), ({n6}))})
#double.min.7(n1, n2, n3, n4, n5, n6, n7) double.min(({n1}), {double.min.6(({n2}), ({n3}), ({n4}), ({n5}), ({n6}), ({n7}))})
#double.min.8(n1, n2, n3, n4, n5, n6, n7, n8) double.min(({n1}), {double.min.7(({n2}), ({n3}), ({n4}), ({n5}), ({n6}), ({n7}), ({n8}))})
#double.min.9(n1, n2, n3, n4, n5, n6, n7, n8, n9) double.min(({n1}), {double.min.8(({n2}), ({n3}), ({n4}), ({n5}), ({n6}), ({n7}), ({n8}), ({n9}))})
#double.min.10(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10) double.min(({n1}), {double.min.9(({n2}), ({n3}), ({n4}), ({n5}), ({n6}), ({n7}), ({n8}), ({n9}), ({n10}))})
#lastTime(name) ("last_time[" . ({name}) . "]")

; Guard to prevent too frequent executions
#requireMinRestSecond1(name, second) \
    gotoif(\
        999, \
        (gdg({lastTime({name})}) > 0.) \
        && ( \
            gdg("time") - gdg({lastTime({name})}) < ({second}) \
        ) \
    )

#requireMinRestSecond2(name) \
    gds({lastTime({name})}, round(gdg("time")))

#gotoIfKeyLeft(label) gotoif(({label}), gsg("input") == KeyLeft)
#gotoIfKeyRight(label) gotoif(({label}), gsg("input") == KeyRight)
#gotoIfKeyUp(label) gotoif(({label}), gsg("input") == KeyUp)
#gotoIfKeyDown(label) gotoif(({label}), gsg("input") == KeyDown)
#gotoIfKeyEnter(label) gotoif(({label}), gsg("input") == KeyEnter)
#gotoIfKeyExit(label) gotoif(({label}), gsg("input") == KeyExit)
#clearKey gss("input", "")


#gotoSwitch.1( \
    cond1, label1 \
) gotoif({switch.1(int, ({label1}), \
    ({cond1}), ({label1}) \
)}, \
    ({cond1}) \
)

{lua( dofile("test.lua") )}


;;; ---------------------------------------------------------------------------
;;; Number parsing
#switch.1(type, else, \
    cond1, value1 \
) ternary.{type}(({cond1}), {value1}, {else})

#switch.2(type, else, \
    cond1, value1, \
    cond2, value2 \
) {switch.1({type}, \
    {switch.1({type}, ({else}), \
        ({cond1}), ({value1}) \
    )}, \
    ({cond2}), ({value2}) \
)}

#switch.3(type, else, \
    cond1, value1, \
    cond2, value2, \
    cond3, value3 \
) {switch.1({type}, \
    {switch.2({type}, ({else}), \
        ({cond1}), ({value1}), \
        ({cond2}), ({value2}) \
    )}, \
    ({cond3}), ({value3}) \
)}

#switch.4(type, else, \
    cond1, value1, \
    cond2, value2, \
    cond3, value3, \
    cond4, value4 \
) {switch.1({type}, \
    {switch.3({type}, ({else}), \
        ({cond1}), ({value1}), \
        ({cond2}), ({value2}), \
        ({cond3}), ({value3}) \
    )}, \
    ({cond4}), ({value4}) \
)}

#switch.5(type, else, \
    cond1, value1, \
    cond2, value2, \
    cond3, value3, \
    cond4, value4, \
    cond5, value5 \
) {switch.1({type}, \
    {switch.4({type}, ({else}), \
        ({cond1}), ({value1}), \
        ({cond2}), ({value2}), \
        ({cond3}), ({value3}), \
        ({cond4}), ({value4}) \
    )}, \
    ({cond5}), ({value5}) \
)}

#switch.6(type, else, \
    cond1, value1, \
    cond2, value2, \
    cond3, value3, \
    cond4, value4, \
    cond5, value5, \
    cond6, value6 \
) {switch.1({type}, \
    {switch.5({type}, ({else}), \
        ({cond1}), ({value1}), \
        ({cond2}), ({value2}), \
        ({cond3}), ({value3}), \
        ({cond4}), ({value4}), \
        ({cond5}), ({value5}) \
    )}, \
    ({cond6}), ({value6}) \
)}

#switch.7(type, else, \
    cond1, value1, \
    cond2, value2, \
    cond3, value3, \
    cond4, value4, \
    cond5, value5, \
    cond6, value6, \
    cond7, value7 \
) {switch.1({type}, \
    {switch.6({type}, ({else}), \
        ({cond1}), ({value1}), \
        ({cond2}), ({value2}), \
        ({cond3}), ({value3}), \
        ({cond4}), ({value4}), \
        ({cond5}), ({value5}), \
        ({cond6}), ({value6}) \
    )}, \
    ({cond7}), ({value7}) \
)}

#switch.8(type, else, \
    cond1, value1, \
    cond2, value2, \
    cond3, value3, \
    cond4, value4, \
    cond5, value5, \
    cond6, value6, \
    cond7, value7, \
    cond8, value8 \
) {switch.1({type}, \
    {switch.7({type}, ({else}), \
        ({cond1}), ({value1}), \
        ({cond2}), ({value2}), \
        ({cond3}), ({value3}), \
        ({cond4}), ({value4}), \
        ({cond5}), ({value5}), \
        ({cond6}), ({value6}), \
        ({cond7}), ({value7}) \
    )}, \
    ({cond8}), ({value8}) \
)}

#switch.9(type, else, \
    cond1, value1, \
    cond2, value2, \
    cond3, value3, \
    cond4, value4, \
    cond5, value5, \
    cond6, value6, \
    cond7, value7, \
    cond8, value8, \
    cond9, value9 \
) {switch.1({type}, \
    {switch.8({type}, ({else}), \
        ({cond1}), ({value1}), \
        ({cond2}), ({value2}), \
        ({cond3}), ({value3}), \
        ({cond4}), ({value4}), \
        ({cond5}), ({value5}), \
        ({cond6}), ({value6}), \
        ({cond7}), ({value7}), \
        ({cond8}), ({value8}) \
    )}, \
    ({cond9}), ({value9}) \
)}

#switch.10(type, else, \
    cond1, value1, \
    cond2, value2, \
    cond3, value3, \
    cond4, value4, \
    cond5, value5, \
    cond6, value6, \
    cond7, value7, \
    cond8, value8, \
    cond9, value9, \
    cond10, value10 \
) {switch.1({type}, \
    {switch.9({type}, ({else}), \
        ({cond1}), ({value1}), \
        ({cond2}), ({value2}), \
        ({cond3}), ({value3}), \
        ({cond4}), ({value4}), \
        ({cond5}), ({value5}), \
        ({cond6}), ({value6}), \
        ({cond7}), ({value7}), \
        ({cond8}), ({value8}), \
        ({cond9}), ({value9}) \
    )}, \
    ({cond10}), ({value10}) \
)}


#parseDigit(c) {switch.9(int, 0, \
    ({c}) == "1", 1, \
    ({c}) == "2", 2, \
    ({c}) == "3", 3, \
    ({c}) == "4", 4, \
    ({c}) == "5", 5, \
    ({c}) == "6", 6, \
    ({c}) == "7", 7, \
    ({c}) == "8", 8, \
    ({c}) == "9", 9 \
)}

#parseDigits.1(d1) ({parseDigit({d1})})
#parseDigits.2(d1, d2) (10 * {parseDigit({d1})} + {parseDigits.1(({d2}))})
#parseDigits.3(d1, d2, d3) (100 * {parseDigit({d1})} + {parseDigits.2(({d2}), ({d3}))})
#parseDigits.4(d1, d2, d3, d4) (1000 * {parseDigit({d1})} + {parseDigits.3(({d2}), ({d3}), ({d4}))})
#parseDigits.5(d1, d2, d3, d4, d5) (10000 * {parseDigit({d1})} + {parseDigits.4(({d2}), ({d3}), ({d4}), ({d5}))})

#parseNumber.3(n) {parseDigits.3(sub(({n}), 0, 1), sub(({n}), 1, 1), sub(({n}), 2, 1))}

;;; ---------------------------------------------------------------------------
;;; Town Utilities
#isOpenTown \
    (health(true) == 0.0 &&  ( \
        isopen("towertesting") || \
        isopen("tradingpost") || \
        isopen("powerplant") || \
        isopen("factory") || \
        isopen("laboratory") || \
        isopen("shipyard") || \
        isopen("workshop") || \
        isopen("arcade") || \
        isopen("museum") || \
        isopen("headquarters") || \
        isopen("constructionfirm") || \
        isopen("statueofcubos") || \
        isopen("mine") \
    ) == false)

;;; ---------------------------------------------------------------------------
;;; Tower Utilities
