:import [Library]

;;; ---------------------------------------------------------------------------
;;; Declarations
:global int region_difficulty ; start with 0, 0-5: first region, 6-11: second-region
:global int tower_testing_type ; 0: Normal, 1: Endless, 2: Challenge, 3: Idle
:global double time
:local double last_time

;;; ---------------------------------------------------------------------------
;;; Impulse
key.6()

;;; ---------------------------------------------------------------------------
;;; Conditions
isopen("towertesting")

;;; ---------------------------------------------------------------------------
;;; Macros
#StartRegion 0
#StartDifficulty 0
#TrialMode 1 ; Endless

#TowerHealth health(false)

;;; ---------------------------------------------------------------------------
;;; Actions

    region_difficulty = 6 * {StartRegion} + {StartDifficulty}
    tower_testing_type = {TrialMode};

REGION_DIFFICULTY_LOOP:
    executesync("Tower/_Select Level")

    {relclick(0.15, 0.07)} ; "Launch" button
    
    last_time = time
    waituntil({TowerHealth} > 0. || (time - last_time) > 4.) ; wait max 4 seconds
    gotoif(NEXT_DIFFICULTY, {TowerHealth} == 0.) ; Probably the level is not yet opened

    {relclick(0.30, 0.51)} ; Close the Upgrade menu
    wait(1.0)
    {relclick(0.02, 0.51)} ; Open the Upgrade menu

KEEP_CLICKING_TO_TOWN:
    {relclick(0.72, 0.33)} ; Click the "To Town" button
    show("towertesting", true)
    gotoif(KEEP_CLICKING_TO_TOWN, (isopen("towertesting") == false)) ; no need to wait for health

    wait(1.0)

    ; {relclick(0.03, 0.04)} ; Click the "Exit" button
    ; {relclick(0.27, 0.32)} ; Click the "To Town" button

NEXT_DIFFICULTY:
    region_difficulty = region_difficulty + 1
    gotoif(REGION_DIFFICULTY_LOOP, region_difficulty < {kMaxRegionDifficulty})

    execute("Main") ; Prevent idle

