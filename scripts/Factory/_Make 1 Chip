:import [Library]
:import Factory/[CraftMagic]

;;; ---------------------------------------------------------------------------
;;; Declarations
:global int chip_tier
:local int tier

;;; ---------------------------------------------------------------------------
;;; Impulse
key.3()

;;; ---------------------------------------------------------------------------
;;; Conditions
isopen("factory")

;;; ---------------------------------------------------------------------------
;;; Macros
#TargetChipCount(tier) ( \
    {switch.5(double, 0., \
        ({tier}) == 1, 2000., \
        ({tier}) == 2, 240., \
        ({tier}) == 3, 80., \
        ({tier}) == 4, 25., \
        ({tier}) == 5, 30. \
    )} \
)

#HigherChipTier(tier) ({tier})
#LowerChipTier(tier) (({tier}) - 1)

#LowerTierChipRatio(tier) double.min(12., 4. * (i2d({tier}) - 1.0))
#LowerTierChipMinCount(tier) 10.

#HigherCircuitTier(tier) (({tier}) * 2)
#LowerCircuitTier(tier) (({tier}) * 2 - 1)

#HigherCircuitPlateRatio(tier) ( \
    {switch.3(double, 2., \
        ({tier}) == 1, 1., \
        ({tier}) == 4, 6., \
        ({tier}) == 5, 8. \
    )} \
)
#LowerCircuitPlateRatio(tier) ( \
    {switch.3(double, 4., \
        ({tier}) == 1, 1., \
        ({tier}) == 4, 6., \
        ({tier}) == 5, 8. \
    )} \
)

#HigherCircuitWireRatio(tier) ( \
    {switch.2(double, 4., \
        ({tier}) == 1, 2., \
        ({tier}) >= 4, 2. \
    )} \
)
#LowerCircuitWireRatio(tier) 2.

#HigherPlateMinCount(tier) 50.
#LowerPlateMinCount(tier) 50.

#HigherCableMaxCount(tier) ( \
    {switch.1(double, 100., \
        ({tier}) <= 3, 100. * i2d(4 ^ (4 - ({tier}))) \
    )} \
)
#LowerCableMaxCount(tier) ( \
    {switch.1(double, 100., \
        ({tier}) <= 3, 100. * i2d(4 ^ (4 - ({tier}))) \
    )} \
)

#HigherCableMinCount(tier) 10.
#LowerCableMinCount(tier) 10.

#HigherIngotMinCount(tier) 100.
#LowerIngotMinCount(tier) 100.

;;; ---------------------------------------------------------------------------
;;; Actions

    tier = {switch.1(int, 3, \
        chip_tier > 0, chip_tier \
    )}

    {craftMagic.7( \
        "chip", {HigherChipTier(tier)}, \
        {itemLimitMax("chip", {HigherChipTier(tier)}, {TargetChipCount(tier)}, 1.)}, \
        {itemLimitMin("chip", {LowerChipTier(tier)}, {LowerTierChipMinCount(tier)}, {LowerTierChipRatio(tier)})}, \
        {itemWithRatio("plate.circuit", {HigherCircuitTier(tier)}, {HigherCircuitPlateRatio(tier)})}, \
        {itemWithRatio("plate.circuit", {LowerCircuitTier(tier)}, {LowerCircuitPlateRatio(tier)})}, \
        {itemWithRatio("circuit", {HigherCircuitTier(tier)}, {HigherCircuitWireRatio(tier)})}, \
        {itemWithRatio("circuit", {LowerCircuitTier(tier)}, {LowerCircuitWireRatio(tier)})}, \
        {itemWithRatio("chip", {LowerChipTier(tier)}, {LowerTierChipRatio(tier)})} \
    )}

    gotoif(SKIP_REFINERY, active("refinery"))

    ; Make circuit plate (higher tier)
    {produceMagic.2( \
        "plate", {HigherCircuitTier(tier)}, "refinery", \
        {itemLimitMax.2( \
            {itemWithRatio("chip", {HigherChipTier(tier)}, 1.)}, \
            {itemWithRatio("plate.circuit", {HigherCircuitTier(tier)}, {HigherCircuitPlateRatio(tier)})}, \
            {TargetChipCount(tier)}, 1. / {HigherCircuitPlateRatio(tier)} \
        )}, \
        {itemLimitMin("plate", {HigherCircuitTier(tier)}, {HigherPlateMinCount(tier)}, 1.)} \
    )}

    ; Make circuit plate (lower tier)
    {produceMagic.2( \
        "plate", {LowerCircuitTier(tier)}, "refinery", \
        {itemLimitMax.2( \
            {itemWithRatio("chip", {HigherChipTier(tier)}, 1.)}, \
            {itemWithRatio("plate.circuit", {LowerCircuitTier(tier)}, {LowerCircuitPlateRatio(tier)})}, \
            {TargetChipCount(tier)}, 1. / {LowerCircuitPlateRatio(tier)} \
        )}, \
        {itemLimitMin("plate", {LowerCircuitTier(tier)}, {LowerPlateMinCount(tier)}, 1.)} \
    )}

    ; Make cable T4
    {produceMagic.2( \
        "ingot", {HigherCircuitTier(tier)}, "refinery", \
        {itemLimitMax("cable", {HigherCircuitTier(tier)}, {HigherCableMaxCount(tier)}, 2.)}, \
        {itemLimitMin("ingot", {HigherCircuitTier(tier)}, {HigherIngotMinCount(tier)}, 1.)} \
    )}

    ; Make cable T3
    {produceMagic.2( \
        "ingot", {LowerCircuitTier(tier)}, "refinery", \
        {itemLimitMax("cable", {LowerCircuitTier(tier)}, {LowerCableMaxCount(tier)}, 2.)}, \
        {itemLimitMin("ingot", {LowerCircuitTier(tier)}, {LowerIngotMinCount(tier)}, 1.)} \
    )}

SKIP_REFINERY:

    gotoif(SKIP_ASSEMBLER, active("assembler"))

    ; Make circuit wire T4
    {produceMagic.2( \
        "cable", {HigherCircuitTier(tier)}, "assembler", \
        {itemLimitMax.2( \
            {itemWithRatio("chip", {HigherChipTier(tier)}, 1.)}, \
            {itemWithRatio("circuit", {HigherCircuitTier(tier)}, {HigherCircuitWireRatio(tier)})}, \
            {TargetChipCount(tier)}, 1. / {HigherCircuitWireRatio(tier)} \
        )}, \
        {itemLimitMin("cable", {HigherCircuitTier(tier)}, {HigherCableMinCount(tier)}, 1.)} \
    )}

    ; Make circuit wire T3
    {produceMagic.2( \
        "cable", {LowerCircuitTier(tier)}, "assembler", \
        {itemLimitMax.2( \
            {itemWithRatio("chip", {HigherChipTier(tier)}, 1.)}, \
            {itemWithRatio("circuit", {LowerCircuitTier(tier)}, {LowerCircuitWireRatio(tier)})}, \
            {TargetChipCount(tier)}, 1. / {LowerCircuitWireRatio(tier)} \
        )}, \
        {itemLimitMin("cable", {LowerCircuitTier(tier)}, {LowerCableMinCount(tier)}, 1.)} \
    )}

SKIP_ASSEMBLER:

