
;;; ---------------------------------------------------------------------------
;;; Constants

#kTotalAICount 27

#KeyLeft "<"
#KeyRight ">"
#KeyDown "v"
#KeyUp "^"
#KeyEnter "Z"
#KeyExit "X"

#kTickCount "<size=0>_tick_count"
#kTickPerSecond "</size>tick_per_second"

;;; ---------------------------------------------------------------------------
;;; Utilities

; Convert from relative vector to screen vector
#relvec(x, y) vec(width.d() * ({x}), height.d() * ({y}))

; Click at relative location
#relclick(x, y) click(vec(width.d() * ({x}), height.d() * ({y})))
; #relclick(x, y) click({relvec(x, y)})

; Click at relative location of a grid
; (x1, y1) must be top-left
; (x2, y2) must be bottom-right
#gridClick(x1, y1, x2, y2, nCol, nRow, i) \
    {relclick( \
        ({x1}) + if(({nCol}) <= 1, 0.0, (({x2}) - ({x1})) * i2d(({i}) % ({nCol})) / i2d(({nCol}) - 1)), \
        ({y1}) - if(({nRow}) <= 1, 0.0, (({y1}) - ({y2})) * i2d(({i}) / ({nCol})) / i2d(({nRow}) - 1)) \
    )}

; Scroll the scrollbar at relative location to dx and dy
#relscrollbar(x, y, dx, dy) scrollbar(vec(width.d() * ({x}), height.d() * ({y})), ({dx}), ({dy}))

; Clamp positive
#positive(x) double.max(0.0, ({x}))

; Extended min
#double.min.2(a, b) double.min(({a}), ({b}))
#double.min.3(a, b, c) double.min(({a}), double.min(({b}), ({c})))
#double.min.4(a, b, c, d) double.min(({a}), double.min(({b}), double.min(({c}), ({d}))))
#double.min.5(a, b, c, d, e) double.min(({a}), double.min(({b}), double.min(({c}), double.min(({d}), ({e}))))))
#double.min.6(a, b, c, d, e, f) double.min(({a}), double.min(({b}), double.min(({c}), double.min(({d}), double.min(({e}), ({f}))))))

#lastTime(name) ("last_time[" . ({name}) . "]")

; Guard to prevent too frequent executions
#requireMinRestSecond1(name, second) \
    gotoif(\
        999, \
        (gdg({lastTime({name})}) > 0.) \
        && ( \
            gdg("time") - gdg({lastTime({name})}) < ({second}) \
        ) \
    )

#requireMinRestSecond2(name) \
    gds({lastTime({name})}, round(gdg("time")))

#gotoIfKeyLeft(label) gotoif(({label}), gsg("input") == KeyLeft)
#gotoIfKeyRight(label) gotoif(({label}), gsg("input") == KeyRight)
#gotoIfKeyUp(label) gotoif(({label}), gsg("input") == KeyUp)
#gotoIfKeyDown(label) gotoif(({label}), gsg("input") == KeyDown)
#gotoIfKeyEnter(label) gotoif(({label}), gsg("input") == KeyEnter)
#gotoIfKeyExit(label) gotoif(({label}), gsg("input") == KeyExit)
#clearKey gss("input", "")
